<%- include("../../views/partials/user/header") %>

<head>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<style>
    :root {
        --primary-color: #29292B;    /* Jet Black */
        --secondary-color: #C9C7BA;  /* Pale Taupe */
        --background-color: #f8f9fa;
        --card-background: #ffffff;
        --text-color: #343a40;
        --border-color: #e9ecef;
        --success-color: #38b000;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --border-radius: 12px;
        --transition: all 0.3s ease;
    }

    body {
        font-family: 'Inter', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }

    .checkout-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        position: relative;
        padding-bottom: 0.5rem;
    }

    .section-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 50px;
        height: 3px;
        background-color: #29292B;  /* Jet Black */
        border-radius: 10px;
    }
    
    .checkout-card {
        background: var(--card-background);
        border-radius: var(--border-radius);
        padding: 24px;
        box-shadow: var(--shadow);
        margin-bottom: 24px;
        transition: var(--transition);
    }

    .checkout-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    /* Buttons */
    .btn-primary {
        background: #29292B;  /* Jet Black */
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary:hover {
        background: #3d3d3f;  /* Slightly lighter Jet Black */
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: transparent;
        color: #29292B;  /* Jet Black */
        border: 1px solid #29292B;  /* Jet Black */
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-secondary:hover {
        background: rgba(201, 199, 186, 0.1);  /* Pale Taupe with opacity */
    }

    .btn-danger {
        background: #C9C7BA;  /* Pale Taupe */
        color: #29292B;  /* Jet Black for contrast */
        border: none;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-danger:hover {
        background: #b5b3a4;  /* Slightly darker Pale Taupe */
    }

    .btn-full {
        width: 100%;
    }

    .products-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .products-table th {
        background: rgba(41, 41, 43, 0.1);  /* Jet Black with opacity */
        font-weight: 600;
        padding: 16px;
        text-align: left;
        border-top: 1px solid var(--border-color);
        border-bottom: 1px solid var(--border-color);
    }

    .products-table th:first-child {
        border-top-left-radius: 8px;
        border-left: 1px solid var(--border-color);
    }

    .products-table th:last-child {
        border-top-right-radius: 8px;
        border-right: 1px solid var(--border-color);
    }

    .products-table td {
        padding: 16px;
        border-bottom: 1px solid var(--border-color);
    }

    .products-table tr:last-child td:first-child {
        border-bottom-left-radius: 8px;
        border-left: 1px solid var(--border-color);
    }

    .products-table tr:last-child td:last-child {
        border-bottom-right-radius: 8px;
        border-right: 1px solid var(--border-color);
    }

    .products-table tr td:first-child {
        border-left: 1px solid var(--border-color);
    }

    .products-table tr td:last-child {
        border-right: 1px solid var(--border-color);
    }

    .product-image {
        width: 80px;
        height: 80px;
        border-radius: 10px;
        object-fit: cover;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: var(--transition);
    }

    .product-image:hover {
        transform: scale(1.05);
    }

    .product-name {
        font-weight: 600;
        color: var(--text-color);
    }

    .product-price {
        font-weight: 700;
        color: #29292B;  /* Jet Black */
    }

    .delete-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: rgba(201, 199, 186, 0.1);  /* Pale Taupe with opacity */
        color: #C9C7BA;  /* Pale Taupe */
        border: none;
        cursor: pointer;
        transition: var(--transition);
    }

    .delete-button:hover {
        background: #C9C7BA;  /* Pale Taupe */
        color: #29292B;  /* Jet Black */
    }

    .address-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .address-card {
        background: var(--card-background);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 20px;
        position: relative;
        transition: var(--transition);
    }

    .address-card:hover {
        border-color: #29292B;  /* Jet Black */
        transform: translateY(-3px);
        box-shadow: var(--shadow);
    }

    .address-card.selected {
        border: 2px solid #29292B;  /* Jet Black */
        background-color: rgba(41, 41, 43, 0.05);  /* Jet Black with opacity */
    }

    .address-radio {
        position: absolute;
        top: 15px;
        right: 15px;
        accent-color: #29292B;  /* Jet Black */
        width: 18px;
        height: 18px;
    }

    .address-type {
        display: inline-block;
        background: rgba(41, 41, 43, 0.1);  /* Jet Black with opacity */
        color: #29292B;  /* Jet Black */
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .address-details {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 15px;
        line-height: 1.6;
    }

    .address-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .add-address-card {
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px dashed var(--border-color);
        border-radius: var(--border-radius);
        padding: 20px;
        background: transparent;
        min-height: 200px;
        transition: var(--transition);
    }

    .add-address-card:hover {
        border-color: #29292B;  /* Jet Black */
        background: rgba(41, 41, 43, 0.05);  /* Jet Black with opacity */
    }

    .coupon-input {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .coupon-input input {
        flex: 1;
        padding: 12px 15px;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .coupon-input input:focus {
        outline: none;
        border-color: #29292B;  /* Jet Black */
        box-shadow: 0 0 0 3px rgba(41, 41, 43, 0.2);  /* Jet Black with opacity */
    }

    .coupon-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .coupon-item {
        background: var(--card-background);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: var(--transition);
    }

    .coupon-item:hover {
        border-color: #29292B;  /* Jet Black */
        transform: translateX(5px);
    }

    .coupon-info {
        display: flex;
        flex-direction: column;
    }

    .coupon-name {
        font-weight: 600;
        color: var(--text-color);
    }

    .coupon-description {
        font-size: 0.8rem;
        color: #666;
    }

    .coupon-actions {
        display: flex;
        gap: 10px;
    }

    .payment-methods {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .payment-option {
        display: flex;
        align-items: center;
        padding: 15px;
        border: 1px solid var(--border-color);
        border-radius: 10px;
        transition: var(--transition);
        cursor: pointer;
    }

    .payment-option:hover {
        border-color: #29292B;  /* Jet Black */
        background: rgba(41, 41, 43, 0.05);  /* Jet Black with opacity */
    }

    .payment-option.selected {
        border-color: #29292B;  /* Jet Black */
        background: rgba(41, 41, 43, 0.05);  /* Jet Black with opacity */
    }

    .payment-radio {
        margin-right: 15px;
        accent-color: #29292B;  /* Jet Black */
        width: 18px;
        height: 18px;
    }

    .payment-label {
        font-weight: 600;
    }

    .summary-table {
        width: 100%;
        margin-bottom: 20px;
    }

    .summary-table tr {
        border-bottom: 1px solid var(--border-color);
    }

    .summary-table tr:last-child {
        border-bottom: none;
    }

    .summary-table th {
        text-align: left;
        padding: 12px 0;
        font-weight: 600;
    }

    .summary-table td {
        text-align: right;
        padding: 12px 0;
    }

    .summary-total {
        font-size: 1.5rem;
        font-weight: 700;
        color: #29292B;  /* Jet Black */
    }

    .checkout-button {
        background: #29292B;  /* Jet Black */
        color: white;
        border: none;
        padding: 16px 24px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1.1rem;
        cursor: pointer;
        transition: var(--transition);
        display: block;
        width: 100%;
        text-align: center;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .checkout-button:hover {
        background: #3d3d3f;  /* Slightly lighter Jet Black */
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(41, 41, 43, 0.3);  
    }
    .checkout-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr; 
    gap: 30px;
    align-items: start;
}

.checkout-main {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.checkout-sidebar {
    position: sticky;
    top: 20px;
}

.sticky-summary {
    padding: 20px;
    background: var(--card-background);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    transition: var(--transition);
}

.checkout-card {
    padding: 20px; 
}


.address-grid {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
    gap: 15px;
}


.payment-methods {
    gap: 10px;
}

.payment-option {
    padding: 12px;
}


@media (max-width: 768px) {
    .checkout-wrapper {
        grid-template-columns: 1fr; 
    }

    .checkout-sidebar {
        position: static; 
    }

    .sticky-summary {
        margin-bottom: 24px;
    }

    .products-table {
        display: block;
        overflow-x: auto;
    }
}

    @media (max-width: 768px) {
        .address-grid {
            grid-template-columns: 1fr;
        }

        .coupon-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .coupon-actions {
            width: 100%;
        }

        .coupon-actions button {
            flex: 1;
        }

        .products-table {
            display: block;
            overflow-x: auto;
        }
    }
</style>
<div class="checkout-container">
    <div class="checkout-wrapper">
        <div class="checkout-main">
            <div class="checkout-card">
                <h3 class="section-title">Your Products</h3>
                <div class="table-responsive">
                    <table class="products-table">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Product</th>
                                <th>Size</th>
                                <th>Quantity</th>
                                <th>Total</th>
                            </tr>
                        </thead>


                        <tbody>
                            <% if (product && Array.isArray(product) && product.length > 0) { %>
                              <% for (let i = 0; i < product.length; i++) { %>
                                <tr>
                                  <td><img src="/Uploads/product-images/<%= product[i].productId.productImage[0] %>" alt="#" class="product-image"></td>
                                  <td><span class="product-name"><%= product[i].productId.productName %></span></td>
                                  <td><%= product[i].selectedSize %></td>
                                  <td><%= product[i].quantity %></td> 
                                  <td><span class="product-price">₹<%= product[i].price * product[i].quantity %></span></td>
                                </tr>
                              <% } %>
                            <% } else { %>
                              <tr>
                                <td colspan="5" style="text-align: center; padding: 30px;">
                                  <div style="font-size: 1.1rem; color: #666;">Your cart is empty</div>
                                  <a href="/" class="btn-primary" style="margin-top: 15px;">Shop Now</a>
                                </td>
                              </tr>
                            <% } %>
                        </tbody>

                    </table>
                </div>
            </div>

            <div class="checkout-card">
                <h3 class="section-title">Delivery Address</h3>
                <div class="address-grid">
                    <% if (locals.userAddress && userAddress.address.length > 0) { %>
                        <% userAddress.address.forEach((address) => { %>
                            <div class="address-card" id="address-<%= address._id %>">
                                <input class="address-radio" type="radio" id="addressRadio<%= address._id %>" name="selectedAddress" value="<%= address._id %>" onchange="selectAddress('<%= address._id %>')">
                                <span class="address-type"><%= address.addressType %></span>
                                <div class="address-details">
                                    <strong><%= address.name %></strong><br />
                                    <%= address.city %>, <%= address.landMark %><br />
                                    <%= address.state %> - <%= address.pincode %><br />
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
                                        <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"/>
                                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                                    </svg>
                                    <%= address.phone %><br />
                                    <% if (address.altPhone) { %>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
                                            <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"/>
                                            <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                                        </svg>
                                        Alt: <%= address.altPhone %>
                                    <% } %>
                                </div>
                                <div class="address-actions">
                                    <a href="/editAddresscheck?id=<%= address._id %>" class="btn-secondary">Edit</a>
                                </div>
                            </div>
                        <% }) %>
                    <% } %>
                    <div class="add-address-card">
                        <a href="/addaddresscheck" class="btn-primary">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 8px;">
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                            </svg>
                            Add New Address
                        </a>
                    </div>
                </div>
            </div>
            <div class="checkout-card">
                <h3 class="section-title">Payment Method</h3>
                <div class="payment-methods">
                    <div class="payment-option" onclick="selectPaymentMethod('cod')">
                        <input class="payment-radio" type="radio" value="cod" name="payment_option" id="CashOnDelivey" checked="">
                        <label class="payment-label" for="CashOnDelivey">
                            Cash on Delivery
                            <% if (codEligible) { %>
                                <span style="color: red; font-size: 12px;">(Not available for orders above ₹1000)</span>
                            <% } %>
                        </label>
                    </div>
                    <div class="payment-option" onclick="selectPaymentMethod('razorpay')">
                        <input class="payment-radio" required="" value="razorpay" type="radio" name="payment_option" id="Razorpay">
                        <label class="payment-label" for="Razorpay">Razorpay</label>
                    </div>
                    <div class="payment-option" onclick="selectPaymentMethod('wallet')">
                        <input class="payment-radio" required="" value="wallet" type="radio" name="payment_option" id="wallet">
                        <label class="payment-label" for="wallet">Wallet</label>
                    </div>
                </div>
             </div>

             <div class="checkout-card">
                <h3 class="section-title">Discount Coupons</h3>
                <div class="coupon-input">
                    <input type="text" id="inputCoupon" placeholder="Enter coupon code" class="form-control">
                    <button class="btn-primary" id="applyButton" type="button" onclick="applyCoupon('<%= grandTotal %>')">Apply</button>
                   
                        <button class="btn-danger" id="removeButton" type="button" onclick="removeCoupon()">Remove Coupon</button>
                    
                </div>
                <ul class="coupon-list">
                    <% if (locals.Coupon && Coupon.length > 0) { %>
                        <% for (let i = 0; i < Coupon.length; i++) { %>
                            <li class="coupon-item">
                                <div class="coupon-info" style="display: flex; flex-direction: column; background-color: #f9f9f9; border: 1px dashed #1e90ff; border-radius: 8px; padding: 10px 15px; margin: 10px 0; box-shadow: 0 2px 5px rgba(0,0,0,0.05);">
                                    <span class="coupon-name" style="font-weight: 600; font-size: 16px; color: #2d3436; margin-bottom: 5px;"><%= Coupon[i].name %></span>
                                    <span style="color: #00b894; font-size: 14px; margin-bottom: 3px;">you can get <%= Coupon[i].offerPrice %> discount</span>
                                    <span class="coupon-name" style="font-size: 13px; color: #636e72; font-style: italic;">on above <%= Coupon[i].minimumPrice %> purchasing</span>
                                </div>
                            </li>
                        <% } %>
                    <% } else { %>
                        <li style="text-align: center; padding: 20px; color: #666;">No coupons available at this time</li>
                    <% } %>
                </ul>
            </div>




            

        </div>
        <div class="checkout-sidebar">
            <div class="checkout-card sticky-summary">
                <h3 class="section-title">Order Summary</h3>
                <table class="summary-table">
                    <tr>
                        <th>Shipping</th>
                        <td><em>₹<%=locals.deliveryCharge%></em></td>
                    </tr>
                    <tr>
                        <th>Total price</th>
                        <td><em>₹<%=locals. grandTotal%></em></td>
                    </tr>
                    <tr>
                        <th>Discount</th>
                        <td id="discount">
                            <% if (locals.offerPrice) { %>
                                -₹<%= locals.offerPrice %>
                            <% } else { %>
                                ₹0
                            <% } %>
                        </td>
                    </tr>
                    <tr>
                        <th>Final amount</th>
                        <td class="summary-total" id="totalValue">₹<%=discountedTotal %></td>
                    </tr>
                </table>
                <button type="button" class="checkout-button" onclick="placeOrder()">Complete Order</button>
            </div>
        </div>
    </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<% if (stockError) { %>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const stockError = `<%- JSON.stringify(stockError) %>`;
        Swal.fire({
            title: 'Stock Issue',
            text: stockError,
            icon: 'warning',
            confirmButtonColor: '#FF3F6c',
            confirmButtonText: 'Go to Cart',
            showCancelButton: true,
            cancelButtonText: 'Continue Shopping'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/cart';
            } else {
                window.location.href = '/shop';
            }
        });
    });
    </script>
    <% } %>


</script>
<script>
async function placeOrder() {
    const selectedPayment = document.querySelector('input[name="payment_option"]:checked');
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const paymentMethod = selectedPayment?.value.trim();
    const grandTotal = parseFloat('<%=discountedTotal %>');

    if (!selectedAddress) {
        Swal.fire({
            title: 'Address Required',
            text: 'Please select a delivery address',
            icon: 'warning',
            confirmButtonColor: '#FF3F6c'
        });
        return;
    }

    const selectedAddressId = selectedAddress.value;
    
    try {
        const stockCheckResponse=await fetch('/check-stock',{
            method:'POST',
            headers:{ 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: '<%= user._id %>' })
        })
        const stockResult= await stockCheckResponse.json();
        if(!stockResult.success){
            Swal.fire({
                title:'stock issue',
                text:stockResult.message||'Some items in your cart are out of stock or have insufficient quantity.',
                icon:'warning',
                confirmButtonColor:'#FF3F6c',
                confirmButtonText:'Go to Cart'
            }).then(()=>{
                window.location.href='/cart'
            })
            return
        }

    } catch (error) {
        Swal.fire({
            title: 'Error',
            text: 'Failed to check stock availability: ' + error.message,
            icon: 'error',
            confirmButtonColor: '#FF3F6c'
        });
        return;
    }

    if (paymentMethod === 'wallet') {
        try {
            const response = await fetch('/wallet/balance');
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const contentType = response.headers.get('Content-Type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Invalid response format from /wallet/balance');
            }

            const { balance } = await response.json();

            if (balance < grandTotal) {
                Swal.fire({
                    title: 'Insufficient Balance',
                    html: `Available: ₹${balance.toFixed(2)}<br>Required: ₹${grandTotal.toFixed(2)}`,
                    icon: 'error',
                    confirmButtonColor: '#FF3F6c'
                });
                return;
            }

            await processOrder(selectedAddressId, paymentMethod);
        } catch (error) {
            console.error('Wallet balance check failed:', error);
            Swal.fire({
                title: 'Payment Error',
                text: 'Could not verify wallet balance: ' + error.message,
                icon: 'error',
                confirmButtonColor: '#FF3F6c'
            });
        }
        return;
    }

    if (paymentMethod === 'cod' && grandTotal > 1000) {
        Swal.fire({
            title: 'Payment Error',
            text: 'Cash on Delivery is not available for orders above ₹1000',
            icon: 'error',
            confirmButtonColor: '#FF3F6c'
        });
        return;
    }

   
    
  
    if (paymentMethod === 'razorpay') {
    const total = parseInt('<%=grandTotal%>');
    try {
        const response = await fetch('/createOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ amount: grandTotal, currency: 'INR' })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const contentType = response.headers.get('Content-Type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Invalid response format from /createOrder');
        }

        const data = await response.json();
        if (!data.success) throw new Error('Failed to create order');

        const options = {
            key: '<%=key_id%>',
            amount: data.order.amount,
            currency: data.order.currency,
            order_id: data.order.id,
            name: 'NORD',
            description: 'Test Transaction',
            handler: async function (response) {
                try {
                    const orderResponse = await fetch('/place-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ paymentMethod, addressId: selectedAddressId })
                    });

                    if (!orderResponse.ok) {
                        throw new Error(`Failed to place order: ${orderResponse.status}`);
                    }

                    const contentType = orderResponse.headers.get('Content-Type');
                    if (!contentType || !contentType.includes('application/json')) {
                        throw new Error('Invalid response format from /place-order');
                    }

                    const result = await orderResponse.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Payment Successful!',
                            text: 'Your order has been placed successfully!',
                            icon: 'success',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            window.location.href = '/orderConfirm';
                        });
                    } else {
                        Swal.fire({
                            title: 'Error Saving Order!',
                            text: result.message || 'An error occurred!',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        title: 'Error Saving Order!',
                        text: error.message,
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                }
            },
            prefill: {
                email: 'test@example.com',
                contact: '9999999999'
            },
            theme: { color: '#3399cc' },
            modal: {
                ondismiss: function () {
          
                    window.location.href = `/paymentFailure?orderId=${data.order.id}&paymentMethod=razorpay&addressId=${selectedAddressId}&amount=${grandTotal}`;
                }
            }
        };

        const rzp = new Razorpay(options);
        rzp.on('payment.failed', function (response) {
          
            window.location.href = `/paymentFailure?orderId=${data.order.id}&paymentMethod=razorpay&addressId=${selectedAddressId}&amount=${grandTotal}&error=${encodeURIComponent(response.error.description)}`;
        });

        rzp.open();
    } catch (error) {
        Swal.fire({
            title: 'Payment Failed!',
            text: error.message,
            icon: 'error',
            confirmButtonColor: '#dc3545'
        });
    }
    return;
}
  
  
  
    Swal.fire({
        title: 'Processing Order',
        text: 'Please wait while we process your order...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => Swal.showLoading()
    });

    try {
        const response = await fetch('/place-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ addressId: selectedAddressId, paymentMethod })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const contentType = response.headers.get('Content-Type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Invalid response format from /place-order');
        }

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                title: 'Success!',
                text: 'Order completed successfully!',
                icon: 'success',
                confirmButtonColor: '#FF3F6c'
            }).then(() => {
                window.location.href = '/orderConfirm';
            });
        } else {
            Swal.fire({
                title: 'Error',
                text: result.message || 'Unable to place the order!',
                icon: 'error',
                confirmButtonColor: '#FF3F6c'
            });
        }
    } catch (error) {
        Swal.fire({
            title: 'Error',
            text: 'An error occurred while processing your order: ' + error.message,
            icon: 'error',
            confirmButtonColor: '#FF3F6c'
        });
    }
}

function selectAddress(addressId) {
    document.querySelectorAll('.address-card').forEach(card => card.classList.remove('selected'));
    document.getElementById('address-' + addressId).classList.add('selected');
}

function selectPaymentMethod(method) {
    document.querySelectorAll('.payment-option').forEach(option => option.classList.remove('selected'));
    const option = document.querySelector(`input[value="${method}"]`);
    option.checked = true;
    option.closest('.payment-option').classList.add('selected');
}

async function applyCoupon(productPrice) {
    const couponCode = document.getElementById('inputCoupon').value.trim();

    if (!couponCode) {
        Swal.fire({
            icon: 'warning',
            title: 'Warning!',
            text: 'Please enter a coupon code!',
            confirmButtonColor: '#f39c12'
        });
        return;
    }

    try {
        const response = await fetch('/applyCoupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ couponCode, productPrice })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const contentType = response.headers.get('Content-Type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Invalid response format from /applyCoupon');
        }

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied!',
                text: result.message || 'Discount applied successfully!',
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                const totalAmountElement = document.getElementById('totalValue');
                const totalAmount = parseFloat(totalAmountElement.textContent.replace('₹', '').trim());
                const offerPrice = result.offerPrice;

                totalAmountElement.textContent = `₹${(totalAmount - offerPrice).toFixed(2)}`;
                document.getElementById('discount').textContent = `-₹${offerPrice.toFixed(2)}`;
                document.getElementById('applyButton').disabled = true;
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: result.message || 'Invalid coupon! Please try again.',
                confirmButtonColor: '#d33'
            });
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Server Error',
            // text: 'Something went wrong! Please try again later: ' + error.message,
            text: 'you should buy more than minimum price to apply coupon: ',
            confirmButtonColor: '#d33'
        });
    }
}

async function removeCoupon() {
    try {
        const response = await fetch('/removeCoupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const contentType = response.headers.get('Content-Type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Invalid response format from /removeCoupon');
        }

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Coupon Removed!',
                text: result.message || 'Coupon removed successfully!',
                showConfirmButton: false,
                timer: 2000
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: result.message || 'Failed to remove coupon!',
                confirmButtonColor: '#d33'
            });
        }
    } catch (error) {
        console.error('Error removing coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Server Error',
            text: 'Something went wrong! Please try again later: ' + error.message,
            confirmButtonColor: '#d33'
        });
    }
}

async function processOrder(addressId, paymentMethod) {
    try {
        Swal.fire({
            title: 'Processing Payment',
            html: 'Please wait while we secure your transaction...',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => Swal.showLoading()
        });

        const response = await fetch('/place-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ addressId, paymentMethod })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const contentType = response.headers.get('Content-Type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Invalid response format from /place-order');
        }

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                title: 'Payment Successful!',
                text: 'Your order has been placed successfully',
                icon: 'success',
                confirmButtonColor: '#FF3F6c'
            }).then(() => {
                window.location.href = '/orderConfirm';
            });
        } else {
            throw new Error(result.message || 'Payment processing failed');
        }
    } catch (error) {
        Swal.fire({
            title: 'Payment Failed',
            html: `Error processing payment:<br><small>${error.message}</small>`,
            icon: 'error',
            confirmButtonColor: '#FF3F6c'
        });
        console.error('Order Error:', error);
    }
}
</script>





<%- include("../../views/partials/user/footer") %>