<%- include("../../views/partials/user/header") %>
<style>
  :root {
    --primary-color: #4a6cf7;
    --secondary-color: #6c757d;
    --success-color: #28a745;
    --light-color: #f8f9fa;
    --dark-color: #343a40;
    --border-color: #dee2e6;
    --border-radius: 8px;
    --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  body {
    background-color: #f5f7fa;
    color: #333;
    line-height: 1.6;
  }

  /* Layout */
  .container {
    display: flex;
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  /* Sidebar Navigation */
  .sidebar {
    width: 250px;
    background-color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    margin-right: 2rem;
    padding: 1.5rem;
    height: fit-content;
  }

  .nav-menu {
    list-style: none;
  }

  .nav-menu li {
    margin-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 0.5rem;
  }

  .nav-menu li:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  .nav-menu a {
    text-decoration: none;
    color: var(--dark-color);
    font-weight: 500;
    transition: color 0.3s;
    display: block;
    padding: 0.5rem 0;
  }

  .nav-menu a:hover {
    color: var(--primary-color);
  }

  .nav-menu a.active {
    color: var(--primary-color);
    font-weight: 600;
  }

  /* Main Content */
  .main-content {
    flex: 1;
  }

  /* Wallet Container Styles */
  .wallet-container {
    background-color: #fff;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    padding: 30px;
    margin-bottom: 30px;
  }

  .wallet-title {
    font-size: 24px;
    font-weight: 600;
    color: #333;
    margin-bottom: 25px;
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
  }

  /* Balance Section Styles */
  .balance-section {
    display: flex;
    justify-content: center;
    margin-bottom: 30px;
  }

  .balance-card {
    background: linear-gradient(135deg, #2a7fff, #1a56b0);
    border-radius: 15px;
    padding: 30px 50px;
    color: white;
    text-align: center;
    box-shadow: 0 10px 20px rgba(26, 86, 176, 0.2);
    transition: transform 0.3s ease;
    width: 100%;
    max-width: 300px;
  }

  .balance-card:hover {
    transform: translateY(-5px);
  }

  .balance-card .amount {
    font-size: 32px;
    font-weight: 700;
    margin-bottom: 5px;
  }

  .balance-card .label {
    font-size: 16px;
    opacity: 0.9;
    margin: 0;
  }

  /* Action Buttons */
  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 30px;
  }

  .action-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 12px 25px;
    border-radius: 8px;
    font-weight: 600;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-button:first-child {
    background-color: #28a745;
    color: white;
  }

  .action-button:last-child {
    background-color: #dc3545;
    color: white;
  }

  .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .action-button svg {
    width: 18px;
    height: 18px;
  }

  /* Transaction History Section */
  .transaction-history {
    padding-top: 20px;
    border-top: 1px solid #eee;
  }

  .transaction-title {
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 20px;
    color: #333;
  }

  .transaction-table {
    width: 100%;
    border-collapse: collapse;
  }

  .transaction-table th {
    background-color: #f8f9fa;
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
    color: #555;
    border-bottom: 2px solid #ddd;
  }

  .transaction-table td {
    padding: 12px 15px;
    border-bottom: 1px solid #eee;
    color: #333;
  }

  .transaction-table tbody tr:hover {
    background-color: #f9f9f9;
  }

  .empty-transactions {
    text-align: center;
    color: #888;
    font-style: italic;
  }

  /* Modal Styles */
  .modal-content {
    border-radius: 12px;
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .modal-header {
    border-bottom: 1px solid #eee;
    padding: 20px 25px;
  }

  .modal-title {
    font-weight: 600;
    color: #333;
  }

  .modal-body {
    padding: 25px;
  }

  .modal-footer {
    border-top: 1px solid #eee;
    padding: 15px 25px;
  }

  /* Quick Amount Buttons */
  .quick-amount {
    display: inline-block;
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px 15px;
    margin: 0 8px 10px 0;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .quick-amount:hover {
    background-color: #e9ecef;
    border-color: #ced4da;
  }

  /* Breadcrumb Styles */
  .page-header {
    background-color: #f8f9fa;
    padding: 15px 0;
    margin-bottom: 20px;
  }

  .breadcrumb {
    display: flex;
    flex-wrap: wrap;
    padding: 0;
    margin: 0;
    list-style: none;
    font-size: 14px;
    align-items: center;
  }

  .breadcrumb a {
    color: #555;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    color: var(--primary-color);
  }

  .breadcrumb span {
    margin: 0 10px;
    color: #ccc;
    position: relative;
  }

  .breadcrumb span:after {
    content: "/";
    position: absolute;
    top: 0;
    left: 0;
  }

  /* Footer */
  footer {
    background-color: white;
    border-top: 1px solid var(--border-color);
    padding: 1.5rem 0;
    margin-top: 3rem;
  }

  .footer-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    text-align: center;
    color: var(--secondary-color);
    font-size: 0.875rem;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .container {
      flex-direction: column;
    }
    
    .sidebar {
      width: 100%;
      margin-right: 0;
      margin-bottom: 2rem;
    }
    
    .nav-menu {
      display: flex;
      flex-wrap: wrap;
    }
    
    .nav-menu li {
      margin-right: 1rem;
      border-bottom: none;
      padding-bottom: 0;
    }

    .action-buttons {
      flex-direction: column;
      gap: 12px;
    }
    
    .action-button {
      width: 100%;
    }
    
    .transaction-table {
      display: block;
      overflow-x: auto;
    }
    
    .modal-dialog {
      margin: 10px;
    }
  }
</style>

<main class="main">
  

  <div class="container">

    <div class="sidebar">
        <ul class="nav-menu">
            <li><a href="/userProfile">Profile</a></li>
          <li><a href="/useraddress">My Address</a></li>
          <li><a href="/orders">Orders</a></li>
          <li><a href="/wallet">Wallet</a></li>
          <li><a href="/wallethistory">wallet history</a></li>
          <li><a href="/logout">Logout</a></li>
        </ul>
      </div>

  
    <div class="main-content">
      <div class="wallet-container">
        <h2 class="wallet-title">Wallet Status</h2>
        <div class="balance-section">
          <div class="balance-card">
            <p class="amount">₹<span id="availableBalance"><%= wallet.balance.toFixed(2) %></span></p>
            <p class="label">Available Balance</p>
          </div>
        </div>
        <div class="action-buttons">
          <button class="action-button" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
              <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
              <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
            </svg> Add Balance
          </button>
          <button class="action-button" data-bs-toggle="modal" data-bs-target="#withdrawModal">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-square" viewBox="0 0 16 16">
              <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
              <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8"/>
            </svg> Withdraw
          </button>
        </div>
        
     
       
        <!-- Add Money Modal -->
        <div class="modal fade" id="addMoneyModal" tabindex="-1">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Add Money to Wallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="mb-4">
                  <input type="number" id="amount" class="form-control form-control-lg text-center" placeholder="Enter Amount (₹)" min="1" step="1">
                </div>
                <div class="text-center mb-4">
                  <div class="quick-amount" onclick="setAmount(10000)">₹10,000</div>
                  <div class="quick-amount" onclick="setAmount(50000)">₹50,000</div>
                  <div class="quick-amount" onclick="setAmount(100000)">₹100,000</div>
                  <div class="quick-amount" onclick="setAmount(200000)">₹200,000</div>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="payButton">Proceed to Pay</button>
              </div>
            </div>
          </div>
        </div>
        
      
        <div class="modal fade" id="withdrawModal" tabindex="-1">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Withdraw Money</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="mb-3">
                  <label for="withdrawAmount" class="form-label">Enter Amount to Withdraw</label>
                  <input type="number" id="withdrawAmount" class="form-control" min="1" step="1">
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="withdrawButton">Withdraw</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="/js/wallet.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    async function updateWalletData() {
        try {
            const response = await fetch('/wallet/get-data', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            const result = await response.json();
            if (result.success) {
                document.getElementById('availableBalance').textContent = result.balance.toFixed(2);

                const tbody = document.querySelector('.transaction-table tbody');
                tbody.innerHTML = '';

                if (result.transactions.length > 0) {
                    result.transactions.forEach(transaction => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>₹${transaction.amount.toFixed(2)}</td>
                            <td>${transaction.transactionPurpose}</td>
                            <td>${new Date(transaction.createdAt).toLocaleDateString()}</td>
                            <td>
                                ${transaction.transactionType === 'credit' ?
                                    '<span style="color: green;">Credit</span>' :
                                    '<span style="color: red;">Debit</span>'}
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } else {
                    tbody.innerHTML = '<tr class="empty-transactions"><td colspan="4">No transactions found</td></tr>';
                }
            } else {
                console.error('Failed to fetch wallet data:', result.message);
            }
        } catch (error) {
            console.error('Error fetching wallet data:', error);
        }
    }

    async function updateWalletBalance() {
        try {
            const response = await fetch('/wallet/get-balance', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            const result = await response.json();
            if (result.success) {
                document.getElementById('availableBalance').textContent = result.balance.toFixed(2);
            } else {
                console.error('Failed to fetch wallet balance:', result.message);
            }
        } catch (error) {
            console.error('Error fetching wallet balance:', error);
        }
    }

    updateWalletData();
    updateWalletBalance();

    window.addEventListener('focus', () => {
        updateWalletData();
        updateWalletBalance();
    });
});

function setAmount(amount) {
    document.getElementById('amount').value = amount;
}

document.getElementById('payButton').addEventListener('click', async () => {
    const amount = document.getElementById('amount').value;
    
    if (!amount || amount < 1) {
        alert('Please enter a valid amount');
        return;
    }

    try {
        const response = await fetch('/wallet/create-razorpay-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }

        const options = {
            key: data.key_id,
            amount: data.amount,
            currency: "INR",
            name: "Wallet Recharge",
            description: "Add money to wallet",
            order_id: data.order_id,
            handler: async function (response) {
                try {
                    const verifyResponse = await fetch('/wallet/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(response)
                    });

                    const verifyData = await verifyResponse.json();
                    
                    if (verifyData.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Payment successful! Your wallet has been updated.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.reload();
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Payment verification failed. Please contact support.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Payment verification failed. Please contact support.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            },
            prefill: {
                name: "<%= user.name %>",
                email: "<%= user.email %>"
            },
            theme: {
                color: "#4a5568"
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();
        
        const modal = bootstrap.Modal.getInstance(document.getElementById('addMoneyModal'));
        modal.hide();
    } catch (error) {
        console.error('Error:', error);
    }
});

document.getElementById('withdrawButton').addEventListener('click', async () => {
    const amount = document.getElementById('withdrawAmount').value;
    
    if (!amount || amount < 1) {
        alert('Please enter a valid amount');
        return;
    }

    try {
        const response = await fetch('/wallet/withdraw-money', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });

        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                title: 'Success!',
                text: 'Money withdrawn successfully!',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.reload();
                }
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.message || 'Failed to withdraw money. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to withdraw money. Please try again.');
    }
});
</script>

<%- include("../../views/partials/user/footer") %>