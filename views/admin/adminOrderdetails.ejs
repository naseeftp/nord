<%- include("../../views/partials/admin/header") %>
<head>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<style>
    


:root {
  --primary-color: #4f46e5;
  --primary-hover: #4338ca;
  --success-color: #10b981;
  --success-hover: #059669;
  --danger-color: #ef4444;
  --danger-hover: #dc2626;
  --warning-color: #f59e0b;
  --text-primary: #111827;
  --text-secondary: #4b5563;
  --text-muted: #6b7280;
  --bg-body: #f9fafb;
  --bg-card: #ffffff;
  --border-color: #e5e7eb;
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
  --radius-sm: 0.375rem;
  --radius: 0.5rem;
  --radius-lg: 0.75rem;
  --transition: 200ms cubic-bezier(0.4, 0, 0.2, 1);
}


body {
  background-color: var(--bg-body);
  color: var(--text-primary);
  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
  margin: 0;
  padding: 0;
  line-height: 1.6;
}

.container {
  max-width: 1280px;
  margin: 2rem auto;
  padding: 0 1.5rem;
}


h1 {
  font-size: 1.875rem;
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 2rem;
}

h2 {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 1.25rem;
}

/* Layout */
.order-grid {
  display: grid;
  grid-template-columns: 3fr 2fr;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

@media (max-width: 768px) {
  .order-grid {
    grid-template-columns: 1fr;
  }
}

/* Card styles */
.order-details,
.shipping-address,
.order-items {
  background-color: var(--bg-card);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  padding: 1.5rem;
  height: fit-content;
  border: 1px solid var(--border-color);
  transition: box-shadow var(--transition);
}

.order-details:hover,
.shipping-address:hover,
.order-items:hover {
  box-shadow: var(--shadow-md);
}


.order-meta {
  display: grid;
  gap: 1.25rem;
}

.meta-item {
  display: flex;
  flex-direction: column;
  gap: 0.375rem;
}

.label {
  color: var(--text-muted);
  font-size: 0.875rem;
  font-weight: 500;
}

.value {
  color: var(--text-primary);
  font-size: 1rem;
  font-weight: 600;
}

/* Shipping address styles */
.shipping-address p {
  margin: 0.75rem 0;
  color: var(--text-secondary);
  display: flex;
  align-items: baseline;
}

.shipping-address strong {
  color: var(--text-primary);
  font-weight: 600;
  min-width: 120px;
  display: inline-block;
}


.item-card {
  display: flex;
  flex-direction: column;
  padding: 1.25rem;
  background-color: var(--bg-body);
  border-radius: var(--radius-sm);
  margin-bottom: 1rem;
  transition: transform var(--transition), box-shadow var(--transition);
  border: 1px solid var(--border-color);
}

.item-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.item-details {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.item-details h3 {
  margin: 0;
  font-size: 1rem;
  color: var(--text-primary);
  font-weight: 600;
}


select {
  width: 100%;
  padding: 0.625rem 0.75rem;
  background-color: var(--bg-card);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-sm);
  font-size: 0.875rem;
  font-family: inherit;
  cursor: pointer;
  transition: border-color var(--transition), box-shadow var(--transition);
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 1rem;
  padding-right: 2.5rem;
}

select:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
}

select:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  font-size: 0.875rem;
  padding: 0.625rem 1.25rem;
  border-radius: var(--radius-sm);
  border: none;
  cursor: pointer;
  transition: background-color var(--transition), transform var(--transition);
}

button:hover {
  transform: translateY(-1px);
}

button:active {
  transform: translateY(1px);
}


.return-request-section {
  margin-top: 1.25rem;
  padding: 1.25rem;
  background-color: rgba(245, 158, 11, 0.1);
  border-radius: var(--radius-sm);
  border: 1px solid rgba(245, 158, 11, 0.2);
}

.return-request-section h4 {
  margin-top: 0;
  margin-bottom: 0.75rem;
  font-size: 1rem;
  color: var(--text-primary);
}

.return-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1rem;
}

.approve-return-btn {
  background-color: var(--success-color);
  color: white;
}

.approve-return-btn:hover {
  background-color: var(--success-hover);
}

.reject-return-btn {
  background-color: var(--danger-color);
  color: white;
}

.reject-return-btn:hover {
  background-color: var(--danger-hover);
}

.status-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 500;
}

.status-badge.return-pending {
  background-color: var(--warning-color);
  color: white;
}


@media (max-width: 640px) {
  .container {
    padding: 1rem;
    margin-top: 1rem;
  }
  
  .return-actions {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  button {
    width: 100%;
  }
}



/* Add to your CSS */
.return-controls {
    margin-top: 1rem;
    border-top: 1px solid #eee;
    padding-top: 1rem;
}

.btn-approve {
    background-color: #28a745;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 1rem;
}

.btn-reject {
    background-color: #dc3545;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
}

.modal-content {
    background-color: #fff;
    margin: 15% auto;
    padding: 20px;
    width: 80%;
    max-width: 500px;
    border-radius: 8px;
}
</style>

<body>
  <div class="container">
      <h1>Order Details</h1>
      
      <div class="order-grid">
          <div class="order-details">
              <div class="order-meta">
                  <div class="meta-item">
                      <span class="label">Order ID:</span> <span class="value"><%= order.orderId %></span>
                     
                  </div>
                  <div class="meta-item">
                    <span class="label">Payment Method:</span>
                    <span class="value"><%= order.paymentMethod %></span>
                </div>
                <div class="meta-item">
                  <span class="label">totalPrice:</span>
                  <span class="value">₹<%= order.totalPrice%></span>
              </div>
                  <div class="meta-item">
                    <span class="label">deliveryCharge:</span>
                    <span class="value">₹<%= order.deliveryCharge%></span>
                </div>
                <div class="meta-item">
                  <span class="label">discount:</span>
                  <span class="value">-₹<%= order.discount%></span>
              </div>
                  

                  <div class="meta-item">
                    <span class="label">finalAmount:</span>
                    <span class="value">₹<%= order.finalAmount %></span>
                </div>
                  <div class="meta-item">
                      <span class="label">Order Date:</span>
                      <span class="value"><%= new Date(order.createdOn).toLocaleDateString() %></span>
                  </div>
                                                              
              </div>
          </div>
          
          <div class="shipping-address">
              <h2>Shipping Address</h2>
              <% if (address) { %>
                  <p><strong>Name:</strong> <%= address.name %></p>
                  <p><strong>Type:</strong> <%= address.addressType %></p>
                  <p><strong>Landmark:</strong> <%= address.landMark %></p>
                  <p><strong>City:</strong> <%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                  <p><strong>Phone:</strong> <%= address.phone %></p>
                  <p><strong>Alternate Phone:</strong> <%= address.altPhone %></p>
              <% } else { %>
                  <p style="color: red;">Address not available</p>
              <% } %>
          </div>
      </div>
      
      <div class="order-items">
          <h2>Order Items</h2>
          <% order.orderItems.forEach((item, index) => { %>
              <div class="item-card">
                  <div style="display: flex; gap: 1rem; align-items: center;">
                      <% if (item.productImage && item.productImage.length > 0) { %>
                          <img src="<%= item.productImage[0] %>" 
                               style="width: 80px; height: 80px; object-fit: cover; border-radius: 4px;">
                      <% } %>
                      
                      <div class="item-details">
                          <h3><%= item.product.productName %></h3>
                          <p class="label">Product ID: <%= item.product._id %></p>
                          
                          <p class="label">Size: <%= item.selectedSize %></p>
                          <p class="label">item price: <%= item.price %></p>
                          <p class="label">Quantity: <%= item.quantity %></p>
                          <p class="label">Price: ₹<%= item.price * item.quantity %></p>
                          <p class="label">Status: <%= item.status %></p>
                          <% if (item.status === 'Return Requested') { %>
                            <div class="return-controls">
                                <button class="btn-approve" 
                                        onclick="handleReturn('<%= order._id %>', '<%= item._id %>', 'approve')">
                                    Approve Return
                                </button>
                                <button class="btn-reject" 
                                        onclick="handleReturn('<%= order._id %>', '<%= item._id %>')">
                                    Reject Return
                                </button>
                            </div>
                        <% } %>
                          <p class="label">Status: 
                              <select class="item-status" 
                                      data-order-id="<%= order._id %>" 
                                      data-item-id="<%= item._id %>"
                                      <%= item.status === 'Delivered' ? 'disabled' : '' %>>
                                    
                                    
                                  <% if (item.status === 'Pending') { %>
                                      <option value="Pending" selected>Pending</option>
                                      <option value="Processing">Processing</option>
                                      <option value="Shipped">Shipped</option>
                                      <option value="Delivered">Delivered</option>
                                      <option value="Cancelled">Cancelled</option>
                                  <% } else if (item.status === 'Processing') { %>
                                      <option value="Pending" disabled>Pending</option>
                                      <option value="Processing" selected>Processing</option>
                                      <option value="Shipped">Shipped</option>
                                      <option value="Delivered">Delivered</option>
                                      <option value="Cancelled">Cancelled</option>
                                  <% } else if (item.status === 'Shipped') { %>
                                      <option value="Pending" disabled>Pending</option>
                                      <option value="Processing" disabled>Processing</option>
                                      <option value="Shipped" selected>Shipped</option>
                                      <option value="Delivered">Delivered</option>
                                      <option value="Cancelled">Cancelled</option>
                                  <% } else if (item.status === 'Delivered') { %>
                                      <option value="Pending" disabled>Pending</option>
                                      <option value="Processing" disabled>Processing</option>
                                      <option value="Shipped" disabled>Shipped</option>
                                      <option value="Delivered" selected>Delivered</option>
                                      <option value="Cancelled" disabled>Cancelled</option>
                                  <% } else if (item.status === 'Cancelled') { %>
                                      <option value="Cancelled" selected>Cancelled</option>
                                  <% } %>
                              </select>

                              
                             
                          </p>
                      </div>
                  </div>
              </div>
          <% }) %>
      </div>
  </div>

  <div id="rejectModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Reason for Rejection</h3>
        <textarea id="rejectionReason" rows="4"></textarea>
        <button onclick="submitRejection()">Submit Rejection</button>
    </div>
</div>
</body>

<script>
  const finalAmount = '<%= order.finalAmount %>'

  async function updateStatus(orderId) {
      const newStatus = document.getElementById(`status-${orderId}`).value;
      try {
          const response = await fetch(`/admin/update-status/${orderId}`, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: newStatus })
          });

          const result = await response.json();
          
          if (result.success) {
              Swal.fire({
                  icon: 'success',
                  title: 'Status Updated!',
                  text: 'Order status has been updated successfully',
              });
          } else {
              Swal.fire({
                  icon: 'error',
                  title: 'Update Failed',
                  text: result.message,
              });
          }
      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to update status',
          });
      }
  }
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const statusSelects = document.querySelectorAll('.item-status');
      
      statusSelects.forEach(select => {
          select.addEventListener('change', function() {
              const orderId = this.dataset.orderId;
              const itemId = this.dataset.itemId;
              const newStatus = this.value;
              
              updateItemStatus(orderId, itemId, newStatus);
          });
      });
  });
  
  async function updateItemStatus(orderId, itemId, newStatus) {
      try {
          const response = await fetch('/admin/update-item-status', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({ 
                  orderId, 
                  itemId, 
                  status: newStatus 
              })
          });
  
          const result = await response.json();
          
          if (result.success) {
              Swal.fire({
                  icon: 'success',
                  title: 'Status Updated!',
                  text: 'Item status has been updated successfully',
              });
              
              if (newStatus === 'Delivered') {
                  const selectElement = document.querySelector(`.item-status[data-item-id="${itemId}"]`);
                  if (selectElement) {
                      selectElement.disabled = true;
                  }
              }
              
              const selectElement = document.querySelector(`.item-status[data-item-id="${itemId}"]`);
              if (selectElement) {
                  selectElement.value = newStatus;
              }
          } else {
              Swal.fire({
                  icon: 'error',
                  title: 'Update Failed',
                  text: result.message,
              });
          }
      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to update status',
          });
          console.error('Error updating item status:', error);
      }
  }
</script>



<script>

document.querySelector('.close').addEventListener('click', function() {
    document.getElementById('rejectModal').style.display = 'none';
});


window.onclick = function(event) {
    const modal = document.getElementById('rejectModal');
    if (event.target === modal) {
        modal.style.display = 'none';
    }
}


  let currentOrderId, currentItemId;

  function handleReturn(orderId, itemId, action) {
      if (action === 'approve') {
          submitReturnAction(orderId, itemId, 'approve');
      } else {
          currentOrderId = orderId;
          currentItemId = itemId;
          document.getElementById('rejectModal').style.display = 'block';
      }
  }

  function submitRejection() {
      const reason = document.getElementById('rejectionReason').value;
      submitReturnAction(currentOrderId, currentItemId, 'reject', reason);
      document.getElementById('rejectModal').style.display = 'none';
  }

  async function submitReturnAction(orderId, itemId, action, reason) {
      try {
          const response = await fetch('/admin/handle-item-return', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                  orderId,
                  itemId,
                  action,
                  rejectionReason: reason
              })
          });

          const result = await response.json();
          
          if (result.success) {
              Swal.fire({
                  icon: 'success',
                  title: `Return ${action === 'approve' ? 'Approved' : 'Rejected'}!`,
                  text: result.message,
              }).then(() => {
                  location.reload(); 
              });
          } else {
              Swal.fire({
                  icon: 'error',
                  title: 'Action Failed',
                  text: result.message,
              });
          }
      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to process request',
          });
          console.error('Return action error:', error); 
      }
      finally {
        document.getElementById('rejectionReason').value = '';  
    }
  }
</script>


<%- include("../../views/partials/admin/footer") %>

