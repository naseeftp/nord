<%- include("../../views/partials/admin/header") %>
<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* Base styles */
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    }
    
    .content-main {
      padding: 1rem;
    }
    
    .content-title {
      margin-bottom: 1.5rem;
    }
    
    /* Form and card styling */
    .card {
      border-radius: 0.5rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .category-form-container {
      padding: 1.25rem;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin-bottom: 1.5rem;
    }
    
    .form-label {
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    .form-control {
      width: 100%;
      padding: 0.75rem;
      margin-bottom: 1rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }
    
    .error-message {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.25rem;
    }
    
    .d-grid {
      margin-top: 1.25rem;
    }
    
    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 0.75rem 1.25rem;
      cursor: pointer;
      width: 100%;
    }
    
    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }
    
    /* Search bar styling */
    .search-container {
      display: flex;
      justify-content: center;
      margin-bottom: 2rem;
    }
    
    .input-group {
      display: flex;
      align-items: center;
      max-width: 500px;
      width: 100%;
      border: 1px solid #ddd;
      border-radius: 2rem;
      padding: 0.25rem;
      background: #fff;
    }
    
    .input-group input {
      flex: 1;
      border: none;
      padding: 0.75rem;
      outline: none;
      background: transparent;
    }
    
    .input-group button {
      background: transparent;
      border: none;
      padding: 0.5rem 1rem;
      cursor: pointer;
    }
    
    /* Table styling */
    .table-responsive {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    
    .table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .table th,
    .table td {
      padding: 0.75rem;
      vertical-align: middle;
      text-align: left;
    }
    
    .table thead th {
      background-color: #f8f9fa;
      border-bottom: 2px solid #dee2e6;
    }
    
    .table tbody tr:hover {
      background-color: rgba(0, 123, 255, 0.03);
    }
    
    /* Badge and button styling */
    .badge {
      display: inline-block;
      padding: 0.35rem 0.65rem;
      font-size: 0.75rem;
      font-weight: 700;
      border-radius: 2rem;
      text-align: center;
    }
    
    .alert-success {
      background-color: #d1e7dd;
      color: #0f5132;
    }
    
    .alert-danger {
      background-color: #f8d7da;
      color: #842029;
    }
    
    .btn {
      display: inline-block;
      font-weight: 400;
      text-align: center;
      vertical-align: middle;
      cursor: pointer;
      padding: 0.375rem 0.75rem;
      font-size: 1rem;
      border-radius: 0.25rem;
      transition: all 0.15s ease-in-out;
    }
    
    .btn-success {
      background-color: #198754;
      border-color: #198754;
      color: #fff;
    }
    
    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
      color: #fff;
    }
    
    .btn-info {
      background-color: #0dcaf0;
      border-color: #0dcaf0;
      color: #fff;
    }
    
    .text-white {
      color: #fff !important;
      text-decoration: none;
    }
    
    /* Pagination styling */
    .pagination-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 2rem 0;
      gap: 0.625rem;
      flex-wrap: wrap;
    }
    
    .pagination-container a, 
    .pagination-container span.current-page {
      padding: 0.5rem 0.875rem;
      border-radius: 0.3125rem;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s ease;
    }
    
    .pagination-container a {
      background-color: #333;
      color: #fff;
      border: 1px solid #222;
    }
    
    .pagination-container a:hover {
      background-color: #000;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .pagination-container span.current-page {
      background-color: #000;
      color: #fff;
      border: 1px solid #000;
      font-weight: bold;
    }
    
    /* Responsive grid layout */
    .row {
      display: flex;
      flex-wrap: wrap;
      margin-right: -0.75rem;
      margin-left: -0.75rem;
    }
    
    .col-md-3, .col-md-8 {
      position: relative;
      width: 100%;
      padding-right: 0.75rem;
      padding-left: 0.75rem;
    }
    
    /* Media queries for responsive design */
    @media (min-width: 768px) {
      .col-md-3 {
        flex: 0 0 33%;
        max-width: 33%;
      }
      
      .col-md-8 {
        flex: 0 0 67%;
        max-width: 67%;
      }
    }
    
    @media (max-width: 992px) {
      .table th, .table td {
        padding: 0.5rem;
      }
      
      .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
      }
    }
    
    @media (max-width: 767px) {
      .row {
        flex-direction: column;
      }
      
      .col-md-3, .col-md-8 {
        flex: 0 0 100%;
        max-width: 100%;
      }
      
      .category-form-container {
        margin-bottom: 2rem;
      }
      
      .table-container {
        overflow-x: auto;
      }
      
      .search-container .input-group {
        max-width: 100%;
      }
      
      .table th:nth-child(1),
      .table td:nth-child(1) {
        display: none;
      }
    }
    
    @media (max-width: 576px) {
      .content-title {
        font-size: 1.5rem;
      }
      
      .search-container .input-group {
        flex-direction: column;
      }
      
      .table th:nth-child(3),
      .table td:nth-child(3) {
        display: none;
      }
      
      .btn {
        width: 100%;
        margin-bottom: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Category</h2>
      </div>
    </div>
    
    <div class="search-container">
      <form action="/admin/category/" method="get" class="d-inline w-100">
        <div class="input-group">
          <input type="text" class="form-control" placeholder="Search categories" name="search"/>
          <button class="btn" type="submit">Search</button>
        </div>
      </form>
    </div>
    
    <div class="card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3">
            <div class="category-form-container">
              <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                <div class="mb-4">
                  <label for="product_name" class="form-label">Name</label>
                  <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" />
                  <div id="name-error" class="error-message"></div>
                </div>
                <div class="mb-4">
                  <label class="form-label">Description</label>
                  <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" ></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>
                <div class="d-grid">
                  <button class="btn btn-primary" type="submit">
                    Create category
                  </button>
                </div>
              </form>
            </div>
          </div>
          
          <div class="col-md-8">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th class="text-center"></th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer%</th>
                    <th>Offer</th>
                    <th>Status</th>
                    <th>List/Unlist</th>
                    <th class="text-start">Edit</th>
                  </tr>
                </thead>
                <tbody>
                  <%cat.reverse().forEach((category, index)=> { %>
                  <tr>
                    <td></td>
                    <td class="text-start"><%=category.name%></td>
                    <td class="text-start"><%=category.description%></td>
                    <td>
                     <%if(category.categoryoffer){%>
                      <%=category.categoryoffer%>%
                      <%}else{%>
                        0%
                        <%}%>
                   </td>
                   <td class="text-start">
                    <% if (!category.categoryoffer || category.categoryoffer === 0) { %>
                      <button class="btn btn-info text-white" onclick="addOffer('<%= category._id %>')">
                        Add Offer
                      </button>
                    <% } else { %>
                      <button class="btn btn-danger text-white" onclick="removeOffer('<%= category._id %>')">
                        Remove
                      </button>
                    <% } %>
                  </td>
                    <td class="text-start">
                      <%if(category.isListed){%>
                      <span class="badge alert-success">Listed</span>
                      <%}else{%>
                      <span class="badge alert-danger">Unlisted</span>
                      <%}%>
                    </td>
                    <td class="text-start">
                      <%if(category.isListed){%>
                      <button class="btn btn-danger">
                        <a href="/admin/listCategory?id=<%=category._id%>" class="text-white">Unlist</a>
                      </button>
                      <%}else{%>
                      <button class="btn btn-success">
                        <a href="/admin/unlistCategory?id=<%=category._id%>" class="text-white">List</a>
                      </button>
                      <%}%>
                    </td>
                    <td class="text-start">
                      <a href="/admin/editCategory?id=<%=category._id%>" class="btn btn-info text-white">Edit</a>
                    </td>
                  </tr>
                  <%})%>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="pagination-container">
      <% if (currentPage > 1) { %>
      <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
      <% } %> 
      <% for (let i = 1; i <= totalPages; i++) { %> 
        <% if (i === currentPage) { %>
          <span class="current-page"><%= i %></span>
        <% } else { %>
          <a href="?page=<%= i %>"><%= i %></a>
        <% } %> 
      <% } %> 
      <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
      <% } %>
    </div>
  </section>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>
    function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm()) {
        return;
      }
      
      const name = document.getElementById("product_name").value;
      const description = document.getElementById("descriptionId").value;
      
      fetch('/admin/addCategory', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, description })
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(err => {
              throw new Error(err.error);
            });
          }
          return response.json();
        })
        .then(data => {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: "Category added successfully!"
          }).then(() => {
            location.reload();
          });
        })
        .catch(error => {
          if (error.message === "Category already exists") {
            Swal.fire({
              icon: "error",
              title: "Oops",
              text: "Category already exists. Try another name."
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Oops",
              text: "An error occurred while adding the category."
            });
          }
        });
    }
  
    function validateForm() {
      clearErrorMessages();
      const name = document.getElementById("product_name").value.trim();
      const description = document.getElementById("descriptionId").value.trim();
      let isValid = true;
  
      if (name === "") {
        displayErrorMessage("name-error", "Please enter a name");
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should contain only letters");
        isValid = false;
      }
      
      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
      }
      
      return isValid;
    }
  
    function displayErrorMessage(elementId, message) {
      document.getElementById(elementId).innerText = message;
      document.getElementById(elementId).style.display = "block";
    }
  
    function clearErrorMessages() {
      document.querySelectorAll(".error-message").forEach(element => {
        element.innerText = "";
        element.style.display = "none";
      });
    }
  </script>

<script>

async function addOffer(categoryId) {
    const { value: amount } = await Swal.fire({
        title: 'Offer in percentage',
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "%",

    });
   if (!amount || isNaN(amount) || amount < 1 || amount > 99) {
        return Swal.fire("Invalid Input", "Please enter a percentage between 1 and 99", "error");
    }

    try {
        const response = await fetch("/admin/addCategoryOffer", {
            method: "POST",
            headers: {
                'Content-Type': "application/json",
            },
            body: JSON.stringify({
                percentage: amount,
                categoryId: categoryId,
            }),
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
            Swal.fire(
                "Offer Added",
                "The offer has been successfully added",
                "success"
            ).then(() => {
                location.reload();
            });
        } else {
            Swal.fire("Failed", data.message || "Adding offer failed", "error");
        }
    } catch (error) {
        Swal.fire(
            "Error",
            "An error occurred while adding the offer",
            "error"
        );
        console.error("Error adding offer:", error);
    }
}
async function removeOffer(categoryId) {
    try {
        const result = await Swal.fire({
            title: 'Remove Offer',
            text: 'Are you sure you want to remove this offer?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel',
        });
        if (!result.isConfirmed) return;
        const response = await fetch("/admin/removeCategoryOffer", {
            method: 'POST',
            headers: {
                "Content-Type": 'application/json'
            },
            body: JSON.stringify({ categoryId: categoryId })
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
            Swal.fire(
                "Offer Removed",
                "The offer has been successfully removed.",
                "success"
            ).then(() => {
                location.reload();
            });
        } else {
            Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
    } catch (error) {
        Swal.fire(
            "Error",
            "An error occurred while removing the offer.",
            "error"
        );
        console.error("Error removing offer:", error);
    }
}

</script>
<%- include("../../views/partials/admin/footer") %>

